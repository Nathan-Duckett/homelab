services:
  bitwarden:
    image: vaultwarden/server:latest
    container_name: bitwarden
    hostname: bitwarden.${URL}
    restart: always
    environment:
      - YUBICO_CLIENT_ID=${YUBICO_CLIENT_ID}
      - YUBICO_SECRET_KEY=${YUBICO_SECRET_KEY}
    volumes:
      - ~/.bitwarden:/data
    labels:
      - traefik.http.routers.bitwarden-ui.rule=Host(`bitwarden.${URL}`)
      - traefik.http.routers.bitwarden-ui.entrypoints=https
      - traefik.http.routers.bitwarden-ui.service=bitwarden-ui
      - traefik.http.routers.bitwarden-ui.tls=true
      - traefik.http.routers.bitwarden-ui.tls.certresolver=letsencrypt
      - traefik.http.services.bitwarden-ui.loadbalancer.server.port=80
      - traefik.http.routers.bitwarden-websocket.rule=Host(`bitwarden.${URL}`) && Path(`/notification/hub`)
      - traefik.http.routers.bitwarden-websocket.service=bitwarden-websocket
      - traefik.http.services.bitwarden-websocket.loadbalancer.server.port=3012
      - svc.stack=tools
    profiles:
      - tools
  
  flatnotes:
    container_name: flatnotes
    image: dullage/flatnotes:latest
    environment:
      FLATNOTES_AUTH_TYPE: ${FLATNOTES_AUTH_TYPE}
      FLATNOTES_USERNAME: ${FLATNOTES_USERNAME}
      FLATNOTES_PASSWORD: ${FLATNOTES_PASSWORD}
      FLATNOTES_SECRET_KEY: ${FLATNOTES_SECRET_KEY}
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/flatnotes/data:/data
    restart: unless-stopped
    labels:
      - traefik.http.routers.flatnotes.rule=Host(`notes.${URL}`)
      - traefik.http.services.flatnotes.loadbalancer.server.port=8080
      - svc.stack=tools
    profiles:
      - tools

  uptime:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    hostname: up.${URL}
    restart: unless-stopped 
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/uptime-kama/data:/app/data
    labels:
      - traefik.http.routers.uptime.rule=Host(`up.${URL}`) || Host(`up.${INTERNAL_URL}`)
      - traefik.http.services.uptime.loadbalancer.server.port=3001
      - svc.stack=tools
    profiles:
      - tools
  
  draw:
    image: docker.io/excalidraw/excalidraw:latest
    container_name: draw
    restart: unless-stopped 
    labels:
      - traefik.http.routers.draw.rule=Host(`draw.${URL}`)
      - traefik.http.services.draw.loadbalancer.server.port=80
      - svc.stack=tools
    profiles:
      - tools
  
  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/homarr/configs:/app/data/configs
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/homarr/icons:/app/public/icons
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/homarr/data:/data
    labels:
      - traefik.http.routers.homarr.rule=Host(`h.${URL}`)
      - traefik.http.services.homarr.loadbalancer.server.port=7575
      - svc.stack=tools
    profiles:
      - tools

  # Paperless-ngx
  paperless-redis:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/paperless/redis:/data
    profiles:
      - tools

  paperless-web:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - paperless-redis
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/paperless/data:/usr/src/paperless/data
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/paperless/media:/usr/src/paperless/media
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/paperless/export:/usr/src/paperless/export
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/paperless/consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://paperless-redis:6379
      PAPERLESS_URL: https://paperless.${URL}
      PAPERLESS_TIMEZONE: Pacific/Auckland
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
    labels:
      - traefik.http.routers.paperless.rule=Host(`paperless.${URL}`)
      - traefik.http.services.paperless.loadbalancer.server.port=8000
      - svc.stack=tools
    profiles:
      - tools

  httpbin:
    image: kennethreitz/httpbin:latest
    restart: unless-stopped
    labels:
      - traefik.http.routers.httpbin.rule=Host(`httpbin.${URL}`)
      - traefik.http.services.httpbin.loadbalancer.server.port=80
    profiles:
      - tools

  silverbullet:
    image: zefhemel/silverbullet
    restart: unless-stopped
    environment:
      SB_USER: ${SB_USER}
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/silverbullet:/space
    labels:
      - traefik.http.routers.silverbullet.rule=Host(`sb.${URL}`)
      - traefik.http.services.silverbullet.loadbalancer.server.port=3000
    profiles:
      - tools
  
  bytestash:
    image: "ghcr.io/jordan-dalby/bytestash:latest"
    restart: always
    volumes:
      - ${DOCKER_SERVICES_CONFIG_LOCATION}/bytestash:/data/snippets
    environment:
      # See https://github.com/jordan-dalby/ByteStash/wiki/FAQ#environment-variables
      JWT_SECRET: ${BYTESTASH_JWT_SECRET}
      TOKEN_EXPIRY: 24h
      ALLOW_NEW_ACCOUNTS: "false"
      DEBUG: "false"
      DISABLE_ACCOUNTS: "false"
      # This forces it to only use Pocket-ID for auth
      DISABLE_INTERNAL_ACCOUNTS: "true"

      # See https://github.com/jordan-dalby/ByteStash/wiki/Single-Sign%E2%80%90on-Setup for more info
      OIDC_ENABLED: "true"
      OIDC_DISPLAY_NAME: ${POCKET_ID_OIDC_DISPLAY_NAME}
      OIDC_ISSUER_URL: ${POCKET_ID_URL}
      OIDC_CLIENT_ID: ${BYTESTASH_OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET: ${BYTESTASH_OIDC_CLIENT_SECRET}
    labels:
      - traefik.http.routers.bytestash.rule=Host(`bytestash.${URL}`)
      # Use the caddy port which proxies both the frontend and backend
      - traefik.http.services.bytestash.loadbalancer.server.port=5000
    profiles:
      - tools